upstream xxx.baidu.com{
    server 192.168.1.1:8080;
    server 192.168.1.2:8080;
}

server {
    # 开启HTTPS和HTTP2
    listen 443 ssl http2;
    server_name xxx.baidu.com;
    ssl_certificate /usr/local/nginx/cert/baidu.com/baidu.com.pem;
    ssl_certificate_key /usr/local/nginx/cert/baidu.com/baidu.com.key;
    access_log /usr/local/nginx/logs/xxx.baidu.com.access.log main;
    # 如果后端是SpringBoot服务并且开启了actuator了的话, 需要从nginx层屏蔽外部用户的访问
    # 不然会有安全问题
    location ^~ /actuator {
        return 403;
    }
    location / {
        proxy_pass http://xxx.baidu.com;
        # 可以通过HTTP1.1协议请求upstream的后端服务, 这样就可以使用HTTP1.1的keepalive连接复用技术了
        # 公司遇到过后端是k8s的nodeport的时候, 如果启用了keepalive就会出现502的问题, 虚拟机中就
        # 没有这个问题, 噶选项默认1.0, 就是短连接, 每次都会发起新的请求
        # proxy_http_version 1.1;
        # 默认情况下, nginx向后端发送请求的时候加了`proxy_set_header Connection close;`配置
        # 也就是HTTP1的短连接, 每次请求都会断开, 所以如果让nginx向后端转发的时候采用HTTP1.1
        # 的话, 那就需要加上如下的请求头, value为空的话nginx向后端请求的时候就不会加该header.
        # proxy_set_header Connection "";
        # 修改后端返回的信息的header中的Location, 也就是前端用户访问的地址, 一般用不到
        # proxy_redirect default;
        # 默认nginx请求后端加的Host的header为$proxy_host, 也就是proxy_pass后面的值
        # 有时候需要获取用户请求的时候的Host, 所以可以配置如下的请求头
        proxy_set_header Host $host;
        # 将用户的IP传递给后端
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # 尝试跟后端服务建立连接的超时时间, 默认60s
        proxy_connect_timeout 15s;
        # 这个指定设置了发送请求给upstream服务器的超时时间。
        # 超时设置不是为了整个发送期间，而是在两次write操作期间。如果超时后，upstream没有收到新的数据，nginx会关闭连接
        proxy_send_timeout 30;
        # 该指令设置与代理服务器的读超时时间。它决定了nginx会等待多长时间来获得请求的响应。
        # 这个时间不是获得整个response的时间，而是两次reading操作的时间。
        proxy_read_timeout 30;
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_404;
        # 向client response添加header内容
        add_header key value;
    }
    # 自定义错误页面, 不至于太丑陋
    # error_page 500 502 503 504 /50x.html;
    #location = /50x.html {
    #    root html;
    #}

}

server {
    listen 80;
    server_name xxx.baidu.com;
    return 301 https://$server_name$request_uri;
}
