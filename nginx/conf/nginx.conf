# nginx主进程启动用户, 默认为nobody
user  root;
# nginx进程数, 一般跟CPU核数相同
worker_processes  4;
# 全局错误日志, 默认为error级别, 这里设置为notice, 这样错误日志详细一些
error_log  logs/error.log  notice;
# nginx pid文件目录, 这个很重要, 不要随便动, systemctl启动的时候会使用这个文件
pid    /var/run/nginx.pid;
# 一个worker进程打开的最大文件数量
worker_rlimit_nofile 65535;

# events模块中包含nginx中所有处理连接的设置
events {
    # 一个worker进程允许的最大同时连接数量
    worker_connections  65535;
    # 告诉nginx进程一次性处理所有监听队列中的请求而不是一个一个处理
    multi_accept on;
    # 不用明确指定, nginx会选择最高效的方式
    #use epoll;
}


http {
    #---------------------------通用配置---------------------
    # 零拷贝, 加速文件传输
    sendfile        on;
    # 不立即发送, 等一批次满后发送, 提高性能, 只能在sendfile开启的时候才生效
    tcp_nopush     on;
    tcp_nodelay    on;
    # 被设置为 on 时，如果 nginx 发送数据的过程中发现超时，就会关闭连接并发送一个 RST 包（TCP reset）给客户端，客户端会认为这是一个异常中断，进而关闭连接。如果设置为 off ，则不会发送 RST 包，而是等待客户端自行关闭连接。
    reset_timedout_connection on;
    # 域名表大小, 默认配置在域名过长或者过多的时候容易报错
    server_names_hash_max_size 1024;
    server_names_hash_bucket_size  128;
    # 字符编码, adds the specified charset to the “Content-Type” response header field.
    charset UTF-8;
    # 断点续传相关配置 
    max_ranges 1;

    #---------------------------MIME-------------------------
    include       mime.types;
    default_type  application/octet-stream;

    #---------------------------LOGGING----------------------
    # access log格式, 格式名字为main. 各个变量的含义参考https://nginx.org/en/docs/http/ngx_http_upstream_module.html#variables
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
     '$status $body_bytes_sent "$http_referer" '
     '"$http_user_agent" "$http_x_forwarded_for" '
     '$connection $upstream_addr '
     '$upstream_status '
     '$upstream_response_time $request_time '
     '$upstream_http_host $request_body "$http_cookie"';
    # 全局默认access log配置
    access_log  logs/access.log  main;

    #---------------------------SECURITY-----------------------
    # 隐藏nginx版本号, 安全
    server_tokens off;
    #---------------------------CLIENT CONFIG------------------
    # NGINX和客户端之间一般会放置一个SLB, SLB上会配置单个链接的最长超时时间, 所以NGINX与客户端连接的超时时间不用配置了

    # Nginx读取客户端header或者请求URL的时候会分配buffer, 小于该配置项的大小的时候会分配该配置项大小的buffer
    # 大于该配置项大小的时候large_client_header_buffers配置项会生效, 一般的都小于1K, 除非有些cookie配置的特别多等
    client_header_buffer_size 4k;
    # 大于client_header_buffer_size的header走下面的逻辑, 最大不超过 num*size
    large_client_header_buffers 4 16k;
    # 客户端请求的body的最大size, 一般上传文件会用到该配置
    client_max_body_size 1024m;
    # 客户端请求body小于这个直接放内存, 大于这个会放到一个temp文件夹
    client_body_buffer_size 1m;
    #---------------------------PROXY CONFIG------------------
    # 是否开启proxy忽略客户端中断。即如果此项设置为on开启，
    # 则服务器会忽略客户端中断，一直等着代理服务执行返回。
    # 并且如果执行没有发生错误，记录的日志是200日志。
    # 如果超时则会记录504。如果设置为off，则客户端中断后服务器端nginx立即记录499日志
    proxy_ignore_client_abort on;
    proxy_headers_hash_max_size 51200;
    proxy_headers_hash_bucket_size 6400;
    # proxy buffer相关配置
    proxy_buffering on;
    proxy_buffer_size 128k;
    proxy_buffers 16 128k;
    proxy_busy_buffers_size 256k;

    #---------------------------LIMIT CONFIG------------------
    # 限制连接数配置, 表示一个客户端IP地址同时最多存在500个连接, 暂时关闭, 后续有需要可以开启
    #limit_conn_zone $binary_remote_addr zone=globalConnZone:10m;
    #limit_conn globalConnZone 500;
    #limit_conn_log_level notice;
    # 限制访问频率配置, 每秒最多处理单个IP的100个请求, 多余的排队, 暂时关闭, 后续有需要可以开启
    #limit_req_zone $binary_remote_addr zone=globalLimitZone:10m  rate=100r/s;
    #limit_req  zone=globalLimitZone;
    #limit_req_log_level notice;
    # nginx打开文件描述符缓存, 提高性能, 60s内没有访问就过期清除, 满了以后会LRU清除
    open_file_cache max=65535 inactive=60s;
    # 多长时间检测一次
    open_file_cache_valid 80s;
    # 记录查询cache的错误
    open_file_cache_errors on;

    #---------------------------LIMIT CONFIG------------------
    # iframe只允许同源的显示, 安全相关配置
    add_header X-Frame-Options SAMEORIGIN always;



    #---------------------------GZIP--------------------------
    gzip  on;
    gzip_vary on;
    gzip_comp_level 2;
    gzip_min_length 1k;
    gzip_types
      application/javascript
      application/x-javascript
      text/javascript
      text/css
      text/xml
      application/xhtml+xml
      application/xml
      application/atom+xml
      application/rdf+xml
      application/rss+xml
      application/geo+json
      application/json
      application/ld+json
      application/manifest+json
      application/x-web-app-manifest+json
      image/svg+xml
      text/x-cross-domain-policy;


    # upstream配置
    upstream serviceA{
        server k8s-node-inner.drugcube.com:32644;
    }
    upstream serviceB{
        server 172.17.108.69:8099;
        server 172.17.108.71:8099;
        server 172.17.108.80:8099;
    }

    # 包含配置目录
    include /usr/local/nginx/conf/conf.d/*.conf;

}
